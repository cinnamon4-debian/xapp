/* xapp.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "XApp", gir_namespace = "XApp", gir_version = "1.0", lower_case_cprefix = "xapp__")]
namespace XApp {
	[CCode (cheader_filename = "libxapp/xapp-gtk-window.h", type_id = "xapp_gtk_window_get_type ()")]
	public class GtkWindow : Gtk.Window, Atk.Implementor, Gtk.Buildable {
		[CCode (cname = "xapp_gtk_window_new", has_construct_function = false, type = "GtkWidget*")]
		public GtkWindow (Gtk.WindowType type);
		[CCode (cname = "xapp_gtk_window_set_icon_from_file")]
		public void set_icon_from_file (string? file_name) throws GLib.Error;
		[CCode (cname = "xapp_gtk_window_set_icon_name")]
		public void set_icon_name (string? icon_name);
		[CCode (cname = "xapp_gtk_window_set_progress")]
		public void set_progress (int progress);
		[CCode (cname = "xapp_gtk_window_set_progress_pulse")]
		public void set_progress_pulse (bool pulse);
	}
	[CCode (cheader_filename = "libxapp/xapp-kbd-layout-controller.h", type_id = "xapp_kbd_layout_controller_get_type ()")]
	public class KbdLayoutController : GLib.Object {
		[CCode (cname = "xapp_kbd_layout_controller_new", has_construct_function = false)]
		public KbdLayoutController ();
		[CCode (array_length = false, array_null_terminated = true, cname = "xapp_kbd_layout_controller_get_all_names")]
		public unowned string[] get_all_names ();
		[CCode (cname = "xapp_kbd_layout_controller_get_current_flag_id")]
		public int get_current_flag_id ();
		[CCode (cname = "xapp_kbd_layout_controller_get_current_group")]
		public uint get_current_group ();
		[CCode (cname = "xapp_kbd_layout_controller_get_current_icon_name")]
		public string get_current_icon_name ();
		[CCode (cname = "xapp_kbd_layout_controller_get_current_name")]
		public string get_current_name ();
		[CCode (cname = "xapp_kbd_layout_controller_get_current_short_group_label")]
		public string get_current_short_group_label ();
		[CCode (cname = "xapp_kbd_layout_controller_get_current_variant_label")]
		public string get_current_variant_label ();
		[CCode (cname = "xapp_kbd_layout_controller_get_enabled")]
		public bool get_enabled ();
		[CCode (cname = "xapp_kbd_layout_controller_get_flag_id_for_group")]
		public int get_flag_id_for_group (uint group);
		[CCode (cname = "xapp_kbd_layout_controller_get_icon_name_for_group")]
		public string get_icon_name_for_group (uint group);
		[CCode (cname = "xapp_kbd_layout_controller_get_short_group_label_for_group")]
		public string get_short_group_label_for_group (uint group);
		[CCode (cname = "xapp_kbd_layout_controller_get_variant_label_for_group")]
		public string get_variant_label_for_group (uint group);
		[CCode (cname = "xapp_kbd_layout_controller_next_group")]
		public void next_group ();
		[CCode (cname = "xapp_kbd_layout_controller_previous_group")]
		public void previous_group ();
		[CCode (cname = "xapp_kbd_layout_controller_render_cairo_subscript")]
		public static void render_cairo_subscript (Cairo.Context cr, double x, double y, double width, double height, int subscript);
		[CCode (cname = "xapp_kbd_layout_controller_set_current_group")]
		public void set_current_group (uint group);
		[NoAccessorMethod]
		public bool enabled { get; }
		public signal void config_changed ();
		public signal void layout_changed (uint object);
	}
	[CCode (cheader_filename = "libxapp/xapp-monitor-blanker.h", type_id = "xapp_monitor_blanker_get_type ()")]
	public class MonitorBlanker : GLib.Object {
		[CCode (cname = "xapp_monitor_blanker_new", has_construct_function = false)]
		public MonitorBlanker ();
		[CCode (cname = "xapp_monitor_blanker_are_monitors_blanked")]
		public bool are_monitors_blanked ();
		[CCode (cname = "xapp_monitor_blanker_blank_other_monitors")]
		public void blank_other_monitors (Gtk.Window window);
		[CCode (cname = "xapp_monitor_blanker_unblank_monitors")]
		public void unblank_monitors ();
	}
	[CCode (cheader_filename = "libxapp/xapp-gtk-window.h")]
	[SimpleType]
	public struct GtkWindow_autoptr {
	}
	[CCode (cheader_filename = "libxapp/xapp-gtk-window.h", cname = "xapp_set_window_icon_from_file")]
	public static void set_window_icon_from_file (Gtk.Window window, string? file_name) throws GLib.Error;
	[CCode (cheader_filename = "libxapp/xapp-gtk-window.h", cname = "xapp_set_window_icon_name")]
	public static void set_window_icon_name (Gtk.Window window, string? icon_name);
	[CCode (cheader_filename = "libxapp/xapp-gtk-window.h", cname = "xapp_set_window_progress")]
	public static void set_window_progress (Gtk.Window window, int progress);
	[CCode (cheader_filename = "libxapp/xapp-gtk-window.h", cname = "xapp_set_window_progress_pulse")]
	public static void set_window_progress_pulse (Gtk.Window window, bool pulse);
	[CCode (cheader_filename = "libxapp/xapp-gtk-window.h", cname = "xapp_set_xid_icon_from_file")]
	public static void set_xid_icon_from_file (ulong xid, string? file_name);
	[CCode (cheader_filename = "libxapp/xapp-gtk-window.h", cname = "xapp_set_xid_icon_name")]
	public static void set_xid_icon_name (ulong xid, string? icon_name);
	[CCode (cheader_filename = "libxapp/xapp-gtk-window.h", cname = "xapp_set_xid_progress")]
	public static void set_xid_progress (ulong xid, int progress);
	[CCode (cheader_filename = "libxapp/xapp-gtk-window.h", cname = "xapp_set_xid_progress_pulse")]
	public static void set_xid_progress_pulse (ulong xid, bool pulse);
}
